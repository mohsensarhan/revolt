-- =====================================================
-- Supabase Database Initialization Script
-- Executive Food Bank Dashboard
-- =====================================================
-- Run this in Supabase SQL Editor to set up your database
-- =====================================================

-- 1. EXECUTIVE METRICS TABLE
-- =====================================================

CREATE TABLE IF NOT EXISTS executive_metrics (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  meals_delivered BIGINT NOT NULL DEFAULT 0,
  people_served BIGINT NOT NULL DEFAULT 0,
  cost_per_meal DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  program_efficiency DECIMAL(5,2) NOT NULL DEFAULT 0.00,
  revenue DECIMAL(15,2) NOT NULL DEFAULT 0.00,
  expenses DECIMAL(15,2) NOT NULL DEFAULT 0.00,
  reserves DECIMAL(15,2) NOT NULL DEFAULT 0.00,
  cash_position DECIMAL(15,2) NOT NULL DEFAULT 0.00,
  coverage_governorates INTEGER NOT NULL DEFAULT 0,
  scenario_factors JSONB DEFAULT '{}'::jsonb
);

-- Auto-update timestamp trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_executive_metrics_updated_at
  BEFORE UPDATE ON executive_metrics
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security
ALTER TABLE executive_metrics ENABLE ROW LEVEL SECURITY;

-- RLS Policies: Public can read, authenticated can write
DROP POLICY IF EXISTS "Allow public read access" ON executive_metrics;
CREATE POLICY "Allow public read access" ON executive_metrics
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow authenticated write" ON executive_metrics;
CREATE POLICY "Allow authenticated write" ON executive_metrics
  FOR ALL USING (auth.role() = 'authenticated');

-- 2. USERS TABLE
-- =====================================================

CREATE TABLE IF NOT EXISTS users (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  email TEXT NOT NULL UNIQUE,
  role TEXT NOT NULL DEFAULT 'viewer' CHECK (role IN ('admin', 'viewer', 'editor')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  last_login TIMESTAMP WITH TIME ZONE
);

CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Users can view their own data
DROP POLICY IF EXISTS "Users can view own data" ON users;
CREATE POLICY "Users can view own data" ON users
  FOR SELECT USING (auth.uid() = id);

-- Admins can manage all users
DROP POLICY IF EXISTS "Admins can manage users" ON users;
CREATE POLICY "Admins can manage users" ON users
  FOR ALL USING (
    auth.uid() = id OR
    EXISTS (
      SELECT 1 FROM users
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- 3. AUDIT LOGS TABLE
-- =====================================================

CREATE TABLE IF NOT EXISTS audit_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  action TEXT NOT NULL,
  table_name TEXT NOT NULL,
  record_id TEXT NOT NULL,
  old_data JSONB,
  new_data JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Enable RLS
ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;

-- Only admins can view audit logs
DROP POLICY IF EXISTS "Admins can view audit logs" ON audit_logs;
CREATE POLICY "Admins can view audit logs" ON audit_logs
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM users
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- Authenticated users can insert audit logs
DROP POLICY IF EXISTS "Authenticated can insert audit logs" ON audit_logs;
CREATE POLICY "Authenticated can insert audit logs" ON audit_logs
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- 4. SCENARIOS TABLE (Optional)
-- =====================================================

CREATE TABLE IF NOT EXISTS scenarios (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL,
  description TEXT,
  factors JSONB NOT NULL DEFAULT '{}'::jsonb,
  results JSONB DEFAULT '{}'::jsonb,
  created_by UUID REFERENCES auth.users(id),
  is_active BOOLEAN DEFAULT false
);

CREATE TRIGGER update_scenarios_updated_at
  BEFORE UPDATE ON scenarios
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS
ALTER TABLE scenarios ENABLE ROW LEVEL SECURITY;

-- Public can read scenarios
DROP POLICY IF EXISTS "Public can view scenarios" ON scenarios;
CREATE POLICY "Public can view scenarios" ON scenarios
  FOR SELECT USING (true);

-- Authenticated users can create/update scenarios
DROP POLICY IF EXISTS "Authenticated can manage scenarios" ON scenarios;
CREATE POLICY "Authenticated can manage scenarios" ON scenarios
  FOR ALL USING (auth.role() = 'authenticated');

-- 5. INSERT SAMPLE DATA (Optional)
-- =====================================================

-- Only insert if table is empty
INSERT INTO executive_metrics (
  meals_delivered,
  people_served,
  cost_per_meal,
  program_efficiency,
  revenue,
  expenses,
  reserves,
  cash_position,
  coverage_governorates,
  scenario_factors
)
SELECT
  50000000,
  1000000,
  5.50,
  85.0,
  1000000000,
  900000000,
  500000000,
  300000000,
  15,
  '{}'::jsonb
WHERE NOT EXISTS (SELECT 1 FROM executive_metrics);

-- 6. VERIFICATION QUERIES
-- =====================================================

-- Check tables were created
SELECT table_name, table_type
FROM information_schema.tables
WHERE table_schema = 'public'
  AND table_name IN ('executive_metrics', 'users', 'audit_logs', 'scenarios')
ORDER BY table_name;

-- Check RLS is enabled
SELECT tablename, rowsecurity
FROM pg_tables
WHERE schemaname = 'public'
  AND tablename IN ('executive_metrics', 'users', 'audit_logs', 'scenarios');

-- Check sample data
SELECT COUNT(*) as metric_count FROM executive_metrics;

-- 7. NEXT STEPS
-- =====================================================

-- After running this script:
-- 1. Enable Realtime for executive_metrics:
--    Go to Database → Replication → Enable for "executive_metrics"
--
-- 2. Create admin user:
--    Go to Authentication → Users → Add user
--    Email: admin@example.com
--    Password: (use strong password from .env.local)
--
-- 3. Add user to users table:
--    INSERT INTO users (id, email, role)
--    VALUES ('user-uid-from-auth', 'admin@example.com', 'admin');
--
-- 4. Test the connection in your app!

-- =====================================================
-- Script completed successfully! ✅
-- =====================================================
