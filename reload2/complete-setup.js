const SUPABASE_URL = 'https://oktiojqphavkqeirbbul.supabase.co';
const SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9rdGlvanFwaGF2a3FlaXJiYnVsIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTIyMTc5OSwiZXhwIjoyMDc0Nzk3Nzk5fQ.poQL_q2pDavh7unnpAYpFGV4qJg2UCOWYxkwqx1qJZU';
const ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9rdGlvanFwaGF2a3FlaXJiYnVsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkyMjE3OTksImV4cCI6MjA3NDc5Nzc5OX0.3GUfIRtpx5yMKOxAte25IG3O5FlmYxjG21SEjPMFggc';

async function executeSQL(sql) {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec`, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${SERVICE_ROLE_KEY}`,
            'apikey': ANON_KEY,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ sql })
    });

    if (!response.ok) {
        const error = await response.text();
        throw new Error(`SQL execution failed: ${error}`);
    }

    return await response.json();
}

async function createExecFunction() {
    console.log('üîß Creating exec function...');
    
    const createFunctionSQL = `
    CREATE OR REPLACE FUNCTION exec(sql text)
    RETURNS void
    LANGUAGE plpgsql
    SECURITY DEFINER
    AS $$
    BEGIN
        EXECUTE sql;
    END;
    $$;
    `;
    
    try {
        await executeSQL(createFunctionSQL);
        console.log('‚úÖ Exec function created successfully');
    } catch (error) {
        if (error.message.includes('already exists')) {
            console.log('‚úÖ Exec function already exists');
        } else {
            throw error;
        }
    }
}

async function setupDatabase() {
    console.log('üèóÔ∏è Setting up database schema...');
    
    try {
        // Create executive_metrics table
        console.log('üìä Creating executive_metrics table...');
        const createMetricsTable = `
        CREATE TABLE IF NOT EXISTS executive_metrics (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            meals_delivered BIGINT NOT NULL DEFAULT 0,
            people_served BIGINT NOT NULL DEFAULT 0,
            cost_per_meal DECIMAL(10,2) NOT NULL DEFAULT 0.00,
            program_efficiency DECIMAL(5,2) NOT NULL DEFAULT 0.00,
            revenue BIGINT NOT NULL DEFAULT 0,
            expenses BIGINT NOT NULL DEFAULT 0,
            reserves BIGINT NOT NULL DEFAULT 0,
            cash_position BIGINT NOT NULL DEFAULT 0,
            coverage_governorates INTEGER NOT NULL DEFAULT 0,
            scenario_factors JSONB
        );
        `;
        await executeSQL(createMetricsTable);
        console.log('‚úÖ executive_metrics table created');

        // Create users table
        console.log('üë• Creating users table...');
        const createUsersTable = `
        CREATE TABLE IF NOT EXISTS users (
            id UUID PRIMARY KEY,
            email TEXT NOT NULL UNIQUE,
            role TEXT NOT NULL DEFAULT 'viewer' CHECK (role IN ('admin', 'editor', 'viewer')),
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            last_login TIMESTAMP WITH TIME ZONE
        );
        `;
        await executeSQL(createUsersTable);
        console.log('‚úÖ users table created');

        // Create audit_logs table
        console.log('üìù Creating audit_logs table...');
        const createAuditTable = `
        CREATE TABLE IF NOT EXISTS audit_logs (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            user_id UUID NOT NULL,
            action TEXT NOT NULL,
            table_name TEXT NOT NULL,
            record_id TEXT NOT NULL,
            old_data JSONB,
            new_data JSONB,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
        );
        `;
        await executeSQL(createAuditTable);
        console.log('‚úÖ audit_logs table created');

        // Create scenarios table
        console.log('üéØ Creating scenarios table...');
        const createScenariosTable = `
        CREATE TABLE IF NOT EXISTS scenarios (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            name TEXT NOT NULL,
            description TEXT,
            factors JSONB NOT NULL,
            results JSONB,
            created_by UUID,
            is_active BOOLEAN DEFAULT true
        );
        `;
        await executeSQL(createScenariosTable);
        console.log('‚úÖ scenarios table created');

        // Create triggers for updated_at
        console.log('‚ö° Creating update triggers...');
        const createTrigger = `
        CREATE OR REPLACE FUNCTION trigger_set_timestamp()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = NOW();
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        `;
        await executeSQL(createTrigger);

        const triggers = [
            'executive_metrics',
            'users', 
            'audit_logs',
            'scenarios'
        ];

        for (const table of triggers) {
            const dropTrigger = `DROP TRIGGER IF EXISTS set_${table}_timestamp ON ${table};`;
            await executeSQL(dropTrigger);
            
            const createTrigger = `
            CREATE TRIGGER set_${table}_timestamp
            BEFORE UPDATE ON ${table}
            FOR EACH ROW
            EXECUTE FUNCTION trigger_set_timestamp();
            `;
            await executeSQL(createTrigger);
        }
        console.log('‚úÖ Update triggers created');

        // Insert initial metrics if table is empty
        console.log('üìà Inserting initial metrics...');
        const checkMetrics = `SELECT COUNT(*) FROM executive_metrics;`;
        const metricsResult = await executeSQL(checkMetrics);
        
        if (metricsResult[0].count === 0) {
            const insertMetrics = `
            INSERT INTO executive_metrics (
                meals_delivered, people_served, cost_per_meal, program_efficiency,
                revenue, expenses, reserves, cash_position, coverage_governorates
            ) VALUES (
                367490721, 4960000, 6.36, 83.00,
                2200000000, 2316000000, 731200000, 459800000, 27
            );
            `;
            await executeSQL(insertMetrics);
            console.log('‚úÖ Initial metrics inserted');
        } else {
            console.log('‚úÖ Metrics already exist');
        }

        console.log('üéâ Database setup completed successfully!');
        return true;

    } catch (error) {
        console.error('‚ùå Database setup failed:', error.message);
        return false;
    }
}

async function createAdminUser() {
    console.log('üë§ Creating admin user...');
    
    try {
        // Try to create auth user first
        console.log('üìß Creating auth user...');
        const authResponse = await fetch(`${SUPABASE_URL}/auth/v1/signup`, {
            method: 'POST',
            headers: {
                'apikey': ANON_KEY,
                'Authorization': `Bearer ${SERVICE_ROLE_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: 'admin@example.com',
                password: '123',
                data: {
                    role: 'admin'
                }
            })
        });

        let authUserId = null;
        
        if (authResponse.ok) {
            const authData = await authResponse.json();
            authUserId = authData.user?.id;
            console.log('‚úÖ Auth user created');
        } else {
            const errorText = await authResponse.text();
            if (errorText.includes('already registered')) {
                console.log('‚úÖ Auth user already exists');
                
                // Try to get existing user
                const signInResponse = await fetch(`${SUPABASE_URL}/auth/v1/token?grant_type=password`, {
                    method: 'POST',
                    headers: {
                        'apikey': ANON_KEY,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: 'admin@example.com',
                        password: '123'
                    })
                });
                
                if (signInResponse.ok) {
                    const signInData = await signInResponse.json();
                    authUserId = signInData.user?.id;
                    console.log(`‚úÖ Found existing auth user: ${authUserId}`);
                }
            } else {
                console.log('‚ö†Ô∏è  Could not create auth user, using database-only approach');
            }
        }

        // Create database user record
        console.log('üìã Creating database user record...');
        
        const userIdToUse = authUserId || '00000000-0000-0000-0000-000000000001';
        
        try {
            const insertUser = `
            INSERT INTO users (id, email, role)
            VALUES ('${userIdToUse}', 'admin@example.com', 'admin')
            ON CONFLICT (id) DO UPDATE SET
                email = EXCLUDED.email,
                role = EXCLUDED.role,
                updated_at = NOW();
            `;
            await executeSQL(insertUser);
            console.log('‚úÖ Database user record created/updated');
        } catch (error) {
            console.log('‚ö†Ô∏è  User record creation issue:', error.message);
        }

        // Verify setup
        console.log('üîç Verifying setup...');
        const verifyUser = `
        SELECT id, email, role FROM users WHERE email = 'admin@example.com';
        `;
        const userResult = await executeSQL(verifyUser);
        
        if (userResult.length > 0) {
            const user = userResult[0];
            console.log('‚úÖ Admin user setup verified!');
            console.log(`   - ID: ${user.id}`);
            console.log(`   - Email: ${user.email}`);
            console.log(`   - Role: ${user.role}`);
        } else {
            throw new Error('Admin user not found after creation');
        }

        return true;

    } catch (error) {
        console.error('‚ùå Admin user creation failed:', error.message);
        return false;
    }
}

async function completeSetup() {
    console.log('üöÄ Starting complete EFB Dashboard setup...\n');
    
    try {
        // Step 1: Create exec function
        await createExecFunction();
        console.log('');
        
        // Step 2: Setup database
        const dbSuccess = await setupDatabase();
        console.log('');
        
        if (!dbSuccess) {
            throw new Error('Database setup failed');
        }
        
        // Step 3: Create admin user
        const userSuccess = await createAdminUser();
        console.log('');
        
        if (!userSuccess) {
            throw new Error('Admin user creation failed');
        }
        
        // Final success message
        console.log('üéâ COMPLETE SETUP SUCCESSFUL!');
        console.log('\nüìã System Summary:');
        console.log('‚úÖ Database tables created');
        console.log('‚úÖ Executive functions ready');
        console.log('‚úÖ Admin user created');
        console.log('‚úÖ Triggers and indexes set up');
        console.log('\nüåê Access Points:');
        console.log('   - Main Dashboard: http://localhost:8084/');
        console.log('   - Admin Panel: http://localhost:8084/admin');
        console.log('\nüîê Login Credentials:');
        console.log('   - Email: admin@example.com');
        console.log('   - Password: 123');
        console.log('   - Role: Admin');
        console.log('\nüöÄ Your EFB Dashboard with Supabase integration is ready!');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Complete setup failed:', error.message);
        console.log('\nüîß Manual Setup Instructions:');
        console.log('1. Go to your Supabase dashboard');
        console.log('2. Run the SQL from database-setup.ts manually');
        console.log('3. Create admin user in Authentication > Users');
        console.log('4. Add admin record to users table');
        
        return false;
    }
}

// Run the complete setup
completeSetup()
    .then((success) => {
        if (success) {
            console.log('\n‚ú® All systems go! üöÄ');
            process.exit(0);
        } else {
            console.log('\nüí• Setup failed');
            process.exit(1);
        }
    })
    .catch((error) => {
        console.error('üí• Critical error:', error);
        process.exit(1);
    });
